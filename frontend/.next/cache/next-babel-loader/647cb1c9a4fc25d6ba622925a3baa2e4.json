{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMutation } from \"@apollo/client\";\nimport Router from \"next/router\";\nimport useForm from \"../lib/useForm\";\nimport { SIGNUP_MUTATION } from \"./SignUp\";\nimport Form from \"./styles/Form\"; // const CREATE_USER_MUTATION = gql`\n//   mutation CREATE_USER_MUTATION(\n//     $name: String!\n//     $email: String!\n//     $password: String!\n//     $phoneNumber: Int!\n//   ) {\n//     createUser(\n//       data: {\n//         name: $name\n//         email: $email\n//         password: $password\n//         phoneNumber: $phoneNumber\n//       }\n//     ) {\n//       id\n//       name\n//       email\n//       phoneNumber\n//     }\n//   }\n// `;\n\nexport default function CreateUser() {\n  const {\n    inputs,\n    handleChange,\n    resetForm\n  } = useForm({\n    email: \"\",\n    name: \"\",\n    password: \"\"\n  });\n  const [signup, {\n    data,\n    loading,\n    error\n  }] = useMutation(SIGNUP_MUTATION, {\n    variables: inputs // refectch the currently logged in user\n    // refetchQueries: [{ query: CURRENT_USER_QUERY }],\n\n  });\n\n  async function handleSubmit(e) {\n    e.preventDefault(); // stop the form from submitting\n\n    console.log(inputs);\n    const res = await signup().catch(console.error);\n    console.log(res); // Router.push({ pathname: `/user/${res.data.createUser.id}` });\n\n    console.log({\n      data,\n      loading,\n      error\n    });\n    resetForm(); // Send the email and password to the graphqlAPI\n    // {\n    //   async (e) => {\n    //     e.preventDefault();\n    //     const res = await createUser();\n    //     clearForm();\n    // Router.push({ pathname: `/user/${res.data.createUser}` });\n    //   };\n    // }\n  }\n\n  return /*#__PURE__*/_jsxs(Form, {\n    method: \"POST\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsx(\"h2\", {\n      children: \"Add user account\"\n    }), /*#__PURE__*/_jsx(\"p\", {\n      error: error\n    }), /*#__PURE__*/_jsxs(\"fieldset\", {\n      children: [(data === null || data === void 0 ? void 0 : data.createUser) && /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"User added with \", data.createUser.email, \"...!\"]\n      }), /*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"User Name\",\n          autoComplete: \"name\",\n          value: inputs.name,\n          onChange: handleChange\n        })]\n      }), /*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: \"email\",\n        children: [\"Email\", /*#__PURE__*/_jsx(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"User Email Address\",\n          autoComplete: \"email\",\n          value: inputs.email,\n          onChange: handleChange\n        })]\n      }), /*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: \"password\",\n        children: [\"Password\", /*#__PURE__*/_jsx(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"Password\",\n          autoComplete: \"password\",\n          value: inputs.password,\n          onChange: handleChange\n        })]\n      }), /*#__PURE__*/_jsx(\"button\", {\n        type: \"submit\",\n        children: \"Add User\"\n      })]\n    })]\n  });\n} // export default function CreateUser() {\n//   const { inputs, handleChange, clearForm, resetForm } = useForm({});\n//   console.log(inputs);\n//   const [createUser, { loading, error, data }] = useMutation(\n//     CREATE_USER_MUTATION,\n//     {\n//       variables: inputs,\n//       refetchQueries: [{ query: ALL_USERS_QUERY }],\n//     }\n//   );\n//   return (\n//     <form\n//       onSubmit={async (e) => {\n//         e.preventDefault();\n//         const res = await createUser();\n//         clearForm();\n//         Router.push({ pathname: `/user/${res.data.createUser.id}` });\n//       }}\n//     >\n//       <fieldset>\n//         <label htmlFor=\"name\">\n//           Name\n//           <input\n//             required\n//             type=\"text\"\n//             id=\"name\"\n//             placeholder=\"Name\"\n//             value={inputs.name}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <label htmlFor=\"email\">\n//           Email{\" \"}\n//           <input\n//             required\n//             type=\"email\"\n//             placeholder=\"Email address\"\n//             value={inputs.email}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <label htmlFor=\"password\">\n//           Password{\" \"}\n//           <input\n//             required\n//             type=\"password\"\n//             placeholder=\"password\"\n//             value={inputs.password}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <label htmlFor=\"phoneNumber\">\n//           Phone Number{\" \"}\n//           <input\n//             type=\"phoneNumber\"\n//             placeholder=\"phone number\"\n//             value={inputs.phoneNumber}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <button type=\"submit\">Add User</button>\n//       </fieldset>\n//     </form>\n//   );\n// }","map":null,"metadata":{},"sourceType":"module"}